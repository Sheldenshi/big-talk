{"version":3,"sources":["Card/Card.jsx","Draw/Draw.jsx","Config/Firebase/db_config.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","className","question","Draw","drawCard","bind","this","onClick","Component","DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","firebase","apps","length","app","initializeApp","database","ref","child","updateCard","state","cards","currentCard","currentCards","on","snap","push","id","key","val","setState","getRandomCard","Math","floor","random","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"sRAWeA,G,YARF,SAACC,GAAD,OACX,qBAAKC,UAAU,iBAAf,SACE,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,WAAf,SAA2BD,EAAME,iBCiBxBC,G,wDAnBX,WAAYH,GAAQ,IAAD,8BACf,cAAMA,IAEDI,SAAW,EAAKA,SAASC,KAAd,gBAHD,E,uDAOfC,KAAKN,MAAMI,a,6BAGRJ,GACH,OACI,qBAAKC,UAAU,kBAAf,SACI,wBAAQA,UAAU,MAAMM,QAASD,KAAKF,SAAtC,gC,GAdGI,cCHNC,EAAY,CACrBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gB,QC2DJC,G,wDAzDX,WAAYlB,GAAQ,IAAD,6BACf,cAAMA,GACDmB,IAASC,KAAKC,SACf,EAAKC,IAAMH,IAASI,cAAcd,IAEtC,EAAKe,SAAWL,IAASK,WAAWC,MAAMC,MAAM,SAChD,EAAKC,WAAa,EAAKA,WAAWtB,KAAhB,gBAClB,EAAKuB,MAAQ,CACTC,MAAO,GACPC,YAAa,IATF,E,gEAYE,IAAD,OACVC,EAAezB,KAAKsB,MAAMC,MAEhCvB,KAAKkB,SAASQ,GAAG,eAAe,SAAAC,GAC5BF,EAAaG,KAAK,CACdC,GAAIF,EAAKG,IACTlC,SAAU+B,EAAKI,MAAMnC,WAEzB,EAAKoC,SAAS,CACVT,MAAOE,EACPD,YAAa,EAAKS,cAAcR,U,oCAO9BA,GAEV,OADWA,EAAaS,KAAKC,MAAMD,KAAKE,SAAWX,EAAaV,W,mCAKhE,IAAMU,EAAezB,KAAKsB,MAAMC,MAChCvB,KAAKgC,SAAS,CACVR,YAAaxB,KAAKiC,cAAcR,O,+BAKpC,OACI,sBAAK9B,UAAU,MAAf,UACI,qBAAKA,UAAU,UAAf,SACI,cAAC,EAAD,CAAMC,SAAUI,KAAKsB,MAAME,YAAY5B,aAG3C,qBAAKD,UAAU,YAAf,SACI,cAAC,EAAD,CAAMG,SAAUE,KAAKqB,sB,GAlDvBnB,cCCZmC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7B,QACfuB,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MC/DjEC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDalC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,GAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,GAAN,sBAEN3B,EAwCX,SAAiCO,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BT,OAAOC,SAASmC,eAKpBhC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEAzDAoB,CAAwBhC,GAHxBD,EAAgBC,OC5BxBiC,K","file":"static/js/main.0c456d18.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = (props) => (\n  <div className=\"card-container\">\n    <div className=\"card\">\n      <div className=\"question\">{props.question}</div>\n    </div>\n  </div>\n);\n\nexport default Card;\n","import React, { Component } from 'react';\nimport './Draw.css';\n\nclass Draw extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.drawCard = this.drawCard.bind(this);\n    }\n\n    drawCard(){\n        this.props.drawCard();\n    }\n\n    render(props) {\n        return(\n            <div className=\"buttonContainer\">\n                <button className=\"btn\" onClick={this.drawCard}>New Question</button>\n            </div>\n        );\n    }\n}\n\nexport default Draw;","export const DB_CONFIG = {\n    apiKey: \"AIzaSyCVireg_8SNszW2y2-J5oU_QnzQilIM3uM\",\n    authDomain: \"big-talk-d39a7.firebaseapp.com\",\n    databaseURL: \"https://big-talk-d39a7.firebaseio.com\",\n    projectId: \"big-talk-d39a7\",\n    storageBucket: \"big-talk-d39a7.appspot.com\",\n    messagingSenderId: \"711762200445\",\n    appId: \"1:711762200445:web:8ed953423524a294306e14\",\n    measurementId: \"G-E0Q9GNHV0E\"\n\n}","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Card from \"./Card/Card\";\nimport Draw from \"./Draw/Draw\";\nimport { DB_CONFIG } from './Config/Firebase/db_config';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        if (!firebase.apps.length) {\n            this.app = firebase.initializeApp(DB_CONFIG);\n        }\n        this.database = firebase.database().ref().child('cards');\n        this.updateCard = this.updateCard.bind(this);\n        this.state = {\n            cards: [],\n            currentCard: {}\n        }\n    }\n    componentDidMount() {\n        const currentCards = this.state.cards;\n\n        this.database.on('child_added', snap => {\n            currentCards.push({\n                id: snap.key,\n                question: snap.val().question\n            })\n            this.setState({\n                cards: currentCards,\n                currentCard: this.getRandomCard(currentCards)\n            })\n        })\n\n        \n    }\n    \n    getRandomCard(currentCards) {\n        var card = currentCards[Math.floor(Math.random() * currentCards.length)];\n        return(card);\n    }\n    \n    updateCard() {\n        const currentCards = this.state.cards;\n        this.setState({\n            currentCard: this.getRandomCard(currentCards)\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"cardRow\">\n                    <Card question={this.state.currentCard.question}/>\n                </div>\n\n                <div className=\"buttonRow\">\n                    <Draw drawCard={this.updateCard}/>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}